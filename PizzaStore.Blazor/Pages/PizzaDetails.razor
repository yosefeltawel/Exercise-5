@page "/PizzaDetails/{Id:int}"
@using PizzaStore.Blazor.Models
@using PizzaStore.Blazor.Repository
@using System.Text.Json
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStorage

<div class="container extras-container p-4">
    <div class="row">
        <h3 class="display-4 col-12 text-center">Do you want to add any extra on your pizza?</h3>
        @{
            foreach (var topping in ToppingList)
            {
                <div class="col-3">
                    <div class="topping">
                        <img src="Images/Toppings/Sauce.jpg" title="Pizza Sauce" alt="Pizza Sauce"/>
                        <div class="p-2">
                            <h2 class="text-center">@topping.Name</h2>
                            <div class="form">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="Toppings" value="@topping.Id" id="flexCheck_@topping.Id" onchange="@(() => OnCheckBoxChange(topping.Id))">
                                    <label class="form-check-label" for="flexCheck_@topping.Id">
                                        Price @topping.Price
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="text-center">
        <button @onclick="OnPost" type="button" class="btn btn-success">Save</button>
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    public List<Topping> ToppingList { get; set; } = new List<Topping>();
    public PizzaWithTopping PizzaWithTopping { get; set; } = new PizzaWithTopping();
    public List<int> Toppings { get; set; } = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        var repo = new PizzaStoreRepository();
        ToppingList = await repo.GetToppingFromApi();
        this.StateHasChanged();
    }

    public void OnCheckBoxChange(int id)
    {
        if (Toppings.Any(x => x == id))
        {
            Toppings.Remove(id);
        }
        else
        {
            Toppings.Add(id);
        }
    }

    public async Task OnPost()
    {
        PizzaWithTopping.Id = Id;
        PizzaWithTopping.ToppingList = Toppings;
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var result = await ProtectedSessionStorage.GetAsync<List<PizzaWithTopping>>("CartPizzas");
        var order = result.Value;

        if (order == null)
        {
            order = new List<PizzaWithTopping>();
        }

        order.Add(PizzaWithTopping);
        await ProtectedSessionStorage.SetAsync("CartPizzas", order);

        NavManager.NavigateTo("/");
    }
}